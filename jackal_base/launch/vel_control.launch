<launch>
  <arg name="jackal_port" default="/dev/jackal" />
  <arg name="enable_ekf" default="$(optenv ENABLE_EKF true)"/>
  <arg name="enable_vicon" default="true"/>
  <rosparam command="load" file="$(find jackal_base)/config/joystick_params.yaml"/>
  <node pkg="jackal_base" type="jackal_teleop_joy_pwm" name="jackal_teleop_joy_pwm">
    <rosparam>
      # TODO: Specify these in code rather than here.
      require:
        publishers:
          - status
          - feedback
          - imu/data_raw
          - navsat/nmea_sentence
        subscribers:
          - cmd_drive
          - wifi_connected
    </rosparam>
    <param name="port" value="$(arg jackal_port)" />
    <param name="control_mode" value="1"/>
    <param name="wireless_interface" value="$(optenv JACKAL_WIRELESS_INTERFACE wlp2s0)" />
  </node>

  <!-- TODO: Eliminate this by compiling the necessary message definitions into jackal_base. -->
  <node pkg="rosserial_python" type="message_info_service.py" name="rosserial_message_info" />

  <!-- Translate Sentence messages from the MCU to NavSatFix messages -->
  <node pkg="nmea_navsat_driver" type="nmea_topic_driver" name="nmea_topic_driver" ns="navsat" />

  <include file="$(find jackal_torque_control)/launch/control_vel_only.launch">
    <arg name ="enable_vicon" value="$(arg enable_vicon)" /> 
  </include>

  <group if="$(arg enable_vicon)">
    <include file="$(find vicon_bridge)/launch/erl_vicon.launch" />
  </group>

  <group if="$(eval not arg('enable_vicon'))">
    <include file="$(find hector_odom)/launch/odom.launch" />
  </group>


  <!-- Filter raw gyro data into a usable IMU message -->
  <node pkg="imu_filter_madgwick" type="imu_filter_node" name="imu_filter">
    <rosparam file="$(eval optenv('JACKAL_MAG_CONFIG', find('jackal_base')+'/config/mag_config_default.yaml'))" />
    <rosparam>
      gain: 0.1
      zeta: 0.001
      publish_tf: false
    </rosparam>
  </node>

  <arg name="joy_dev" default="$(optenv JACKAL_JOY_DEVICE /dev/input/ps4)" />
  <arg name="joystick" default="true" />

  <group ns="bluetooth_teleop" if="$(arg joystick)">
      <rosparam command="load" file="$(find jackal_base)/config/ps4Mapping.yaml" />
      <param name="joy_node/dev" value="$(arg joy_dev)" />
    <node pkg="joy" type="joy_node" name="joy_node" />

    <node pkg="teleop_twist_joy" type="teleop_node" name="teleop_twist_joy"/>
  </group>

  <node pkg="interactive_marker_twist_server" type="marker_server" name="twist_marker_server">
    <param name="link_name" value="base_link" />
  </node>

  <!-- Diagnostic Aggregator for robot monitor usage -->
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator">
    <rosparam command="load" file="$(find jackal_base)/config/diagnostic_analyzers.yaml" />
  </node>

  <!-- Add Diagnostic Analyzers for ekf localization if enabled --> 
  <group if="$(arg enable_ekf)">
    <node pkg="diagnostic_aggregator" type="add_analyzers" name="add_localization_analyzers">
      <rosparam command="load" file="$(find jackal_base)/config/localization_analyzers.yaml" />
    </node>
  </group>
</launch>
